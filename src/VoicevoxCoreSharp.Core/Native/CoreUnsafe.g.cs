// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace VoicevoxCoreSharp.Core.Native
{
    internal static unsafe partial class CoreUnsafe
    {
#if UNITY_IOS && !UNITY_EDITOR
        const string __DllName = "__Internal";
#else
        const string __DllName = "voicevox_core";
#endif
        



        [DllImport(__DllName, EntryPoint = "initialize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool initialize([MarshalAs(UnmanagedType.U1)] bool use_gpu, int cpu_num_threads, [MarshalAs(UnmanagedType.U1)] bool load_all_models);

        [DllImport(__DllName, EntryPoint = "load_model", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool load_model(long style_id);

        [DllImport(__DllName, EntryPoint = "is_model_loaded", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool is_model_loaded(long speaker_id);

        [DllImport(__DllName, EntryPoint = "finalize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void finalize();

        [DllImport(__DllName, EntryPoint = "metas", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* metas();

        [DllImport(__DllName, EntryPoint = "last_error_message", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* last_error_message();

        [DllImport(__DllName, EntryPoint = "supported_devices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* supported_devices();

        [DllImport(__DllName, EntryPoint = "yukarin_s_forward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool yukarin_s_forward(long length, long* phoneme_list, long* speaker_id, float* output);

        [DllImport(__DllName, EntryPoint = "yukarin_sa_forward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool yukarin_sa_forward(long length, long* vowel_phoneme_list, long* consonant_phoneme_list, long* start_accent_list, long* end_accent_list, long* start_accent_phrase_list, long* end_accent_phrase_list, long* speaker_id, float* output);

        [DllImport(__DllName, EntryPoint = "decode_forward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool decode_forward(long length, long phoneme_size, float* f0, float* phoneme, long* speaker_id, float* output);

        /// <summary>::OpenJtalkRc を&lt;b&gt;構築&lt;/b&gt;(_construct_)する。  解放は ::voicevox_open_jtalk_rc_delete で行う。  @param [in] open_jtalk_dic_dir 辞書ディレクトリを指すUTF-8のパス @param [out] out_open_jtalk 構築先  @returns 結果コード  \\example{ ```c OpenJtalkRc *open_jtalk; voicevox_open_jtalk_rc_new(\"./open_jtalk_dic_utf_8-1.11\", &amp;open_jtalk); ``` }  \\safety{ - `open_jtalk_dic_dir`はヌル終端文字列を指し、かつ&lt;a href=\"#voicevox-core-safety\"&gt;読み込みについて有効&lt;/a&gt;でなければならない。 - `out_open_jtalk`は&lt;a href=\"#voicevox-core-safety\"&gt;書き込みについて有効&lt;/a&gt;でなければならない。 }</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_open_jtalk_rc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern VoicevoxResultCode voicevox_open_jtalk_rc_new(byte* open_jtalk_dic_dir, OpenJtalkRc** out_open_jtalk);

        /// <summary>::OpenJtalkRc を&lt;b&gt;破棄&lt;/b&gt;(_destruct_)する。  @param [in] open_jtalk 破棄対象  \\example{ ```c voicevox_open_jtalk_rc_delete(open_jtalk); ``` }  \\safety{ - `open_jtalk`は ::voicevox_open_jtalk_rc_new で得たものでなければならず、また既にこの関数で解放されていてはいけない。 - `open_jtalk`は以後&lt;b&gt;ダングリングポインタ&lt;/b&gt;(_dangling pointer_)として扱われなくてはならない。 }</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_open_jtalk_rc_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void voicevox_open_jtalk_rc_delete(OpenJtalkRc* open_jtalk);

        /// <summary>デフォルトの初期化オプションを生成する @return デフォルト値が設定された初期化オプション</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_make_default_initialize_options", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern VoicevoxInitializeOptions voicevox_make_default_initialize_options();

        /// <summary>voicevoxのバージョンを取得する。 @return SemVerでフォーマットされたバージョン。</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_get_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* voicevox_get_version();

        /// <summary>VVMファイルから ::VoicevoxVoiceModel を&lt;b&gt;構築&lt;/b&gt;(_construct_)する。  @param [in] path vvmファイルへのUTF-8のファイルパス @param [out] out_model 構築先  @returns 結果コード  \\safety{ - `path`はヌル終端文字列を指し、かつ&lt;a href=\"#voicevox-core-safety\"&gt;読み込みについて有効&lt;/a&gt;でなければならない。 - `out_model`は&lt;a href=\"#voicevox-core-safety\"&gt;書き込みについて有効&lt;/a&gt;でなければならない。 }</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_voice_model_new_from_path", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern VoicevoxResultCode voicevox_voice_model_new_from_path(byte* path, VoicevoxVoiceModel** out_model);

        /// <summary>::VoicevoxVoiceModel を&lt;b&gt;破棄&lt;/b&gt;(_destruct_)する。  @param [in] model 破棄対象  \\safety{ - `model`は ::voicevox_voice_model_new_from_path で得たものでなければならず、また既にこの関数で解放されていてはいけない。 - `model`は以後&lt;b&gt;ダングリングポインタ&lt;/b&gt;(_dangling pointer_)として扱われなくてはならない。 }</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_voice_model_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void voicevox_voice_model_delete(VoicevoxVoiceModel* model);

        /// <summary>::VoicevoxSynthesizer を&lt;b&gt;破棄&lt;/b&gt;(_destruct_)する。  @param [in] synthesizer 破棄対象  \\safety{ - `synthesizer`は ::voicevox_synthesizer_new_with_initialize で得たものでなければならず、また既にこの関数で解放されていてはいけない。 - `synthesizer`は以後&lt;b&gt;ダングリングポインタ&lt;/b&gt;(_dangling pointer_)として扱われなくてはならない。 }</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_synthesizer_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void voicevox_synthesizer_delete(VoicevoxSynthesizer* synthesizer);

        /// <summary>このライブラリで利用可能なデバイスの情報を、JSONで取得する。  JSONの解放は ::voicevox_json_free で行う。  あくまで本ライブラリが対応しているデバイスの情報であることに注意。GPUが使える環境ではなかったとしても`cuda`や`dml`は`true`を示しうる。  @param [out] output_supported_devices_json サポートデバイス情報のJSON文字列  @returns 結果コード  \\example{ ```c char *supported_devices; VoicevoxResultCode result = voicevox_create_supported_devices_json(&amp;supported_devices); ``` }  \\safety{ - `output_supported_devices_json`は&lt;a href=\"#voicevox-core-safety\"&gt;書き込みについて有効&lt;/a&gt;でなければならない。 }</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_create_supported_devices_json", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern VoicevoxResultCode voicevox_create_supported_devices_json(byte** output_supported_devices_json);

        /// <summary>デフォルトの AudioQuery のオプションを生成する @return デフォルト値が設定された AudioQuery オプション</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_make_default_audio_query_options", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern VoicevoxAudioQueryOptions voicevox_make_default_audio_query_options();

        /// <summary>デフォルトの `accent_phrases` のオプションを生成する @return デフォルト値が設定された `accent_phrases` のオプション</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_make_default_accent_phrases_options", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern VoicevoxAccentPhrasesOptions voicevox_make_default_accent_phrases_options();

        /// <summary>デフォルトの `voicevox_synthesizer_synthesis` のオプションを生成する @return デフォルト値が設定された `voicevox_synthesizer_synthesis` のオプション</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_make_default_synthesis_options", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern VoicevoxSynthesisOptions voicevox_make_default_synthesis_options();

        /// <summary>デフォルトのテキスト音声合成オプションを生成する @return テキスト音声合成オプション</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_make_default_tts_options", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern VoicevoxTtsOptions voicevox_make_default_tts_options();

        /// <summary>JSON文字列を解放する。  @param [in] json 解放するJSON文字列  \\safety{ - `json`は以下のAPIで得られたポインタでなくてはいけない。 - ::voicevox_create_supported_devices_json - ::voicevox_synthesizer_create_metas_json - ::voicevox_synthesizer_create_audio_query - ::voicevox_synthesizer_create_accent_phrases - ::voicevox_synthesizer_replace_mora_data - ::voicevox_synthesizer_replace_phoneme_length - ::voicevox_synthesizer_replace_mora_pitch - ::voicevox_user_dict_to_json - 文字列の長さは生成時より変更されていてはならない。 - `json`は&lt;a href=\"#voicevox-core-safety\"&gt;読み込みと書き込みについて有効&lt;/a&gt;でなければならない。 - `json`は以後&lt;b&gt;ダングリングポインタ&lt;/b&gt;(_dangling pointer_)として扱われなくてはならない。 }</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_json_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void voicevox_json_free(byte* json);

        /// <summary>WAVデータを解放する。  @param [in] wav 解放するWAVデータ  \\safety{ - `wav`は以下のAPIで得られたポインタでなくてはいけない。 - ::voicevox_synthesizer_synthesis - ::voicevox_synthesizer_tts - `wav`は&lt;a href=\"#voicevox-core-safety\"&gt;読み込みと書き込みについて有効&lt;/a&gt;でなければならない。 - `wav`は以後&lt;b&gt;ダングリングポインタ&lt;/b&gt;(_dangling pointer_)として扱われなくてはならない。 }</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_wav_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void voicevox_wav_free(byte* wav);

        /// <summary>結果コードに対応したメッセージ文字列を取得する。  @param [in] result_code 結果コード  @returns 結果コードに対応したメッセージ文字列  \\examples{ ```c const char *actual = voicevox_error_result_to_message(VOICEVOX_RESULT_OK); const char *EXPECTED = \"エラーが発生しませんでした\"; assert(strcmp(actual, EXPECTED) == 0); ```  ```c const char *actual voicevox_error_result_to_message(VOICEVOX_RESULT_LOAD_MODEL_ERROR); const char *EXPECTED = \"modelデータ読み込みに失敗しました\"; assert(strcmp(actual, EXPECTED) == 0); ``` }</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_error_result_to_message", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* voicevox_error_result_to_message(VoicevoxResultCode result_code);

        /// <summary>::VoicevoxUserDictWord を最低限のパラメータで作成する。  @param [in] surface 表記 @param [in] pronunciation 読み @returns ::VoicevoxUserDictWord</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_user_dict_word_make", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern VoicevoxUserDictWord voicevox_user_dict_word_make(byte* surface, byte* pronunciation);

        /// <summary>ユーザー辞書をb&gt;構築&lt;/b&gt;(_construct_)する。  @returns ::VoicevoxUserDict</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_user_dict_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern VoicevoxUserDict* voicevox_user_dict_new();

        /// <summary>ユーザー辞書を&lt;b&gt;破棄&lt;/b&gt;(_destruct_)する。  @param [in] user_dict 破棄対象  \\safety{ - `user_dict`は ::voicevox_user_dict_new で得たものでなければならず、また既にこの関数で解放されていてはいけない。 }</summary>
        [DllImport(__DllName, EntryPoint = "voicevox_user_dict_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void voicevox_user_dict_delete(VoicevoxUserDict* user_dict);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct VoicevoxInitializeOptions
    {
        public VoicevoxAccelerationMode acceleration_mode;
        public ushort cpu_num_threads;
        [MarshalAs(UnmanagedType.U1)] public bool load_all_models;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct VoicevoxAudioQueryOptions
    {
        [MarshalAs(UnmanagedType.U1)] public bool kana;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct VoicevoxAccentPhrasesOptions
    {
        [MarshalAs(UnmanagedType.U1)] public bool kana;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct VoicevoxSynthesisOptions
    {
        [MarshalAs(UnmanagedType.U1)] public bool enable_interrogative_upspeak;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct VoicevoxTtsOptions
    {
        [MarshalAs(UnmanagedType.U1)] public bool kana;
        [MarshalAs(UnmanagedType.U1)] public bool enable_interrogative_upspeak;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct VoicevoxUserDictWord
    {
        public byte* surface;
        public byte* pronunciation;
        public nuint accent_type;
        public VoicevoxUserDictWordType word_type;
        public uint priority;
    }


    internal enum VoicevoxAccelerationMode : int
    {
        VOICEVOX_ACCELERATION_MODE_AUTO = 0,
        VOICEVOX_ACCELERATION_MODE_CPU = 1,
        VOICEVOX_ACCELERATION_MODE_GPU = 2,
    }

    internal enum VoicevoxUserDictWordType : int
    {
        VOICEVOX_USER_DICT_WORD_TYPE_PROPER_NOUN = 0,
        VOICEVOX_USER_DICT_WORD_TYPE_COMMON_NOUN = 1,
        VOICEVOX_USER_DICT_WORD_TYPE_VERB = 2,
        VOICEVOX_USER_DICT_WORD_TYPE_ADJECTIVE = 3,
        VOICEVOX_USER_DICT_WORD_TYPE_SUFFIX = 4,
    }

    internal enum VoicevoxResultCode : int
    {
        VOICEVOX_RESULT_OK = 0,
        VOICEVOX_RESULT_NOT_LOADED_OPENJTALK_DICT_ERROR = 1,
        VOICEVOX_RESULT_GET_SUPPORTED_DEVICES_ERROR = 3,
        VOICEVOX_RESULT_GPU_SUPPORT_ERROR = 4,
        VOICEVOX_RESULT_INVALID_STYLE_ID_ERROR = 6,
        VOICEVOX_RESULT_INVALID_MODEL_ID_ERROR = 7,
        VOICEVOX_RESULT_INFERENCE_ERROR = 8,
        VOICEVOX_RESULT_EXTRACT_FULL_CONTEXT_LABEL_ERROR = 11,
        VOICEVOX_RESULT_INVALID_UTF8_INPUT_ERROR = 12,
        VOICEVOX_RESULT_PARSE_KANA_ERROR = 13,
        VOICEVOX_RESULT_INVALID_AUDIO_QUERY_ERROR = 14,
        VOICEVOX_RESULT_INVALID_ACCENT_PHRASE_ERROR = 15,
        VOICEVOX_RESULT_OPEN_ZIP_FILE_ERROR = 16,
        VOICEVOX_RESULT_READ_ZIP_ENTRY_ERROR = 17,
        VOICEVOX_RESULT_MODEL_ALREADY_LOADED_ERROR = 18,
        VOICEVOX_RESULT_STYLE_ALREADY_LOADED_ERROR = 26,
        VOICEVOX_RESULT_INVALID_MODEL_DATA_ERROR = 27,
        VOICEVOX_RESULT_UNLOADED_MODEL_ERROR = 19,
        VOICEVOX_RESULT_LOAD_USER_DICT_ERROR = 20,
        VOICEVOX_RESULT_SAVE_USER_DICT_ERROR = 21,
        VOICEVOX_RESULT_UNKNOWN_USER_DICT_WORD_ERROR = 22,
        VOICEVOX_RESULT_USE_USER_DICT_ERROR = 23,
        VOICEVOX_RESULT_INVALID_USER_DICT_WORD_ERROR = 24,
        VOICEVOX_RESULT_INVALID_UUID_ERROR = 25,
    }


}
    