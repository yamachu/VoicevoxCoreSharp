on: 
  issue_comment:
    types: [created]

jobs:
  test_release:
    if: contains(github.event.comment.body, '/test_release')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - id: get_tag
        run: echo tag="${BODY#/test_release }" >> $GITHUB_OUTPUT
        env:
          BODY: ${{ github.event.comment.body }}
      - uses: actions/checkout@v3
      - if: ${{ github.event.issue.pull_request != null }}
        run: gh pr comment ${PR_NUMBER} -b "Running ${ACTION_URL}"
        env:
          PR_NUMBER: ${{ github.event.issue.number }}
          ACTION_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GH_TOKEN: ${{ github.token }}
      - if: ${{ github.event.issue.pull_request == null }}
        run: gh issue comment ${ISSUE_NUMBER} -b "Running ${ACTION_URL}"
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ACTION_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GH_TOKEN: ${{ github.token }}
      # FIXME: pull/:prNumber/merge ブランチにチェックアウトするのがベターか？
      # release version毎にブランチを生やして、そこで再度互換チェックするかもしれないから要検討
      # - if: ${{ github.event.issue.pull_request != null }}
      #   run: gh pr checkout ${PR_NUMBER}
      #   env:
      #     PR_NUMBER: ${{ github.event.issue.number }}
      #     GH_TOKEN: ${{ github.token }}
      # - if: ${{ github.event.issue.pull_request != null }}
      #   run: git merge --no-ff origin/main
      - id: download-voicevox_core
        uses: sevenc-nanashi/setup-voicevox@v0.1.0
        with:
          download-item: "core"
          path: voicevox_core_resources
          version: ${{ steps.get_tag.outputs.tag }}
      - run: cp ${{ steps.download-voicevox_core.outputs.entrypoint }} tests/VoicevoxCoreSharp.Core.Tests/resources/libvoicevox_core.so
      # TOOD: Linux, bash前提のやつなのでいい感じにする
      - run: mkdir -p tests/VoicevoxCoreSharp.Core.Tests/resources/model; cp -r ${VOICEVOX_CORE_RESOURCES%/libvoicevox_core.so}/model/0.vvm tests/VoicevoxCoreSharp.Core.Tests/resources/model/sample.vvm
        env:
          VOICEVOX_CORE_RESOURCES: ${{ steps.download-voicevox_core.outputs.entrypoint }}
      - uses: actions/cache/restore@v3
        id: restore-open-jtalk-dictionary
        with:
          path: open_jtalk_dic_utf_8-1.11.tar.gz
          key: open_jtalk_dic_utf_8-1.11
      - if: ${{ steps.restore-open-jtalk-dictionary.outputs.cache-hit != 'true' }}
        run: curl -sSLfo open_jtalk_dic_utf_8-1.11.tar.gz https://jaist.dl.sourceforge.net/project/open-jtalk/Dictionary/open_jtalk_dic-1.11/open_jtalk_dic_utf_8-1.11.tar.gz
      - if: ${{ steps.restore-open-jtalk-dictionary.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v3
        with:
          path: open_jtalk_dic_utf_8-1.11.tar.gz
          key: open_jtalk_dic_utf_8-1.11
      - run: |
          cp open_jtalk_dic_utf_8-1.11.tar.gz ./tests/VoicevoxCoreSharp.Core.Tests/resources
          tar zxf ./tests/VoicevoxCoreSharp.Core.Tests/resources/open_jtalk_dic_utf_8-1.11.tar.gz -C tests/VoicevoxCoreSharp.Core.Tests/resources/
      - id: test_dotnet
        run: dotnet test
        continue-on-error: true
      - if: ${{ github.event.issue.pull_request != null }}
        run: |
          BODY=$([[ ${TEST_STATUS} == "failure" ]] && echo "✅ ${ACTION_URL}" || echo "❌ ${ACTION_URL}")
          gh pr comment ${PR_NUMBER} --edit-last -b "${BODY}"
          [[ ${TEST_STATUS} == "failure" ]] && exit 1 || exit 0
        env:
          TEST_STATUS: ${{ steps.test_dotnet.outcome }}
          PR_NUMBER: ${{ github.event.issue.number }}
          ACTION_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GH_TOKEN: ${{ github.token }}
      - if: ${{ github.event.issue.pull_request != null }}
        run: |
          BODY=$([[ ${TEST_STATUS} == "failure" ]] && echo "✅ ${ACTION_URL}" || echo "❌ ${ACTION_URL}")
          gh pr issue ${ISSUE_NUMBER} --edit-last -b "${BODY}"
          [[ ${TEST_STATUS} == "failure" ]] && exit 1 || exit 0
        env:
          TEST_STATUS: ${{ steps.test_dotnet.outcome }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ACTION_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GH_TOKEN: ${{ github.token }}
